{"version":3,"sources":["Components/login/index.tsx","Components/User/index.tsx","Components/TicketCard/index.tsx","Components/_tools/fetchDELETE.ts","Components/createTicket/index.tsx","Components/updateTicket/index.tsx","Components/HelpDesk/index.tsx","Components/adminTicket/index.tsx","Components/Admin/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Login","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","stateMachine","currentrole","setState","userCred","state","Posting","helpDesk","adminRole","data","userName","login","userPass","password","console","log","fetch","method","body","JSON","stringify","headers","Content-Type","then","response","json","length","sessionStorage","setItem","id","redirectPath","catch","err","uRole","handleNamechange","bind","assertThisInitialized","handlePasschange","handleRolechange","handleSubmit","inherits","createClass","key","value","event","target","preventDefault","react_default","a","createElement","Fragment","className","onSubmit","type","placeholder","onChange","required","react_router","to","React","Component","User","clearStorage","clear","react","TicketCard","title","content","ogtext","handleTTchange","handleTicketchange","getItem","createdata","tt","userID","Number","url","concat","Promise","resolve","error","window","location","reload","_this2","update","Accept","show","othershow","onClick","handleDelete","maxLength","CreateTicket","TicketCard_TicketCard","UpdateTicket","GrabData","userPath","grabbedData","alert","map","HelpDesk","displayCreate","createClicked","createHide","displayUpdate","updateClicked","updateHide","createTicket_CreateTicket","updateTicket_UpdateTicket","AdminTicket","Admin","adminTicket_AdminTicket","App","react_router_dom","href","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8dc9eae.chunk.js","sourcesContent":["import React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport './login.css';\n\n\ninterface Props { }\n\ninterface State {\n    login: string;\n    password: string;\n    uRole: string;\n    adminRole: boolean;\n    helpDesk: boolean;\n    userCred: boolean;\n    redirectPath: string;\n}\n\ninterface Ipost//interface must match schema\n{\n    id?: number;\n    userName: string;\n    userPass: string;\n    adminRole: boolean;\n    helpDesk: boolean;\n    userCred: boolean;\n}\n\nexport class Login extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            login: \"\",\n            password: \"\",\n            uRole: \"user\",\n            adminRole: false,\n            helpDesk: false,\n            userCred: false,\n            redirectPath: \"/\"\n        };\n\n        this.handleNamechange = this.handleNamechange.bind(this);\n        this.handlePasschange = this.handlePasschange.bind(this);\n        this.handleRolechange = this.handleRolechange.bind(this);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n    handleNamechange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState\n            ({\n                login: (event.target as HTMLInputElement).value,\n            });\n        console.log(this.state.login);\n    }\n    handlePasschange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState\n            ({\n                password: (event.target as HTMLInputElement).value,\n            });\n        console.log(this.state.password);\n    }\n    handleRolechange(event: React.ChangeEvent<HTMLSelectElement>) {\n        this.setState\n            ({\n                uRole: (event.target as HTMLSelectElement).value\n            });\n        console.log((event.target as HTMLSelectElement).value);\n    }\n\n    stateMachine = (currentrole: string) => {\n        switch (currentrole) {\n            case \"user\":\n                this.setState\n                    ({\n                        userCred: true,\n                    }, () => {\n                        if (this.state.userCred) {\n                            this.Posting();\n                        }\n                    }\n                    );\n                break;\n            case \"helpdesk\":\n                this.setState//we do this weird function create after set state as a hacky .then statement\n                    ({\n                        helpDesk: true,\n                    }, () => {\n                        if (this.state.helpDesk) {\n                            this.Posting();\n                        }\n                    }\n                    );\n                break;\n            case \"admin\":\n                this.setState\n                    ({\n                        adminRole: true,\n                    }, () => {\n                        if (this.state.adminRole)//structured this way for Async \n                        {\n                            this.Posting();//post to db after value is true\n                        }\n                    }\n                    );\n                break;\n        }\n    }\n\n    Posting = () => {\n\n        var data: Ipost = { userName: this.state.login, userPass: this.state.password, adminRole: this.state.adminRole, helpDesk: this.state.helpDesk, userCred: this.state.userCred }\n        console.log(data);\n        //post user data to db and check if logged in or not and loop through the elements and set and cache items to storage\n        fetch(\"https:localhost:5001/api/Data/\",\n            {\n                method: 'POST',\n                body: JSON.stringify(data),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(response => response.json())\n            .then(body => {\n                if (body.length > 0) {//if making account\n                    console.log(body);\n                    if (body[0].adminRole) {\n                        sessionStorage.setItem(\"permission\", \"admin\");\n                        sessionStorage.setItem(\"currentuser\", body[0].id);\n                        console.log(sessionStorage)\n\n                        this.setState({\n                            redirectPath: \"admin\"\n                        });\n\n                    }\n                    else if (body[0].helpDesk) {\n                        sessionStorage.setItem(\"permission\", \"helpdesk\");\n                        sessionStorage.setItem(\"currentuser\", body[0].id);\n                        console.log(sessionStorage)\n\n                        this.setState({\n                            redirectPath: \"helpdesk\"\n                        });\n                        console.log(\"helpdesklogin\");\n\n                    }\n                    else if (body[0].userCred) {\n                        sessionStorage.setItem(\"data\", \"usercred\");\n                        sessionStorage.setItem(\"currentuser\", body[0].id);\n                        console.log(sessionStorage)\n\n                        // sessionStorage.setItem(\"currentuser\", body[0].id);\n\n                        this.setState({\n                            redirectPath: \"user\"\n                        });\n\n                    }\n                    else//somthing went wrong\n                    {\n                        console.log(\"SOMETHING WENT WRONG SEE HAPPENED\")\n                    }\n                }\n                else {\n                    console.log(\"ultra messed up trigger\");\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        console.log(\"click\")\n        this.stateMachine(this.state.uRole);\n\n    }\n\n\n    render() {\n        return (\n            <>\n                <h1 id=\"pageTitle\">Please log in or sign up will occur automatically</h1>\n                <form className=\"loginWrapper\" onSubmit={this.handleSubmit}>\n                    <input type=\"text\" id=\"login\" placeholder=\"username\" value={this.state.login} onChange={this.handleNamechange} />\n                    <input type=\"password\" id=\"password\" placeholder=\"password\" value={this.state.password} onChange={this.handlePasschange} required />\n                    <input type=\"submit\" id=\"lBtn\" value=\"Log In\" />\n                    <select value={this.state.uRole} onChange={this.handleRolechange}>\n                        <option value=\"user\">User</option>\n                        <option value=\"helpdesk\">HelpDesk</option>\n                        <option value=\"admin\">Admin</option>\n                    </select>\n                </form>\n                <Redirect to={this.state.redirectPath} />\n\n            </>\n        )\n    }\n}","import * as React from 'react';\nimport { Link} from \"react-router-dom\";\n\ninterface Props {}\n\ninterface State {\n}\n//simple user page just log in and log out\nexport class User extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  clearStorage = ()=>//logs user in and out\n  {\n    sessionStorage.clear();\n    console.log(sessionStorage);\n  } \n  render() {\n    return(\n      <>\n        <h1 id=\"usertext\">No permissions please log out</h1>\n      </>\n    );\n  }\n}","import * as React from 'react';\nimport \"./ticket.css\"\nimport { httpDELETE } from '../_tools/fetchDELETE';\n\ninterface Props {\n    id?: number;\n    key?: number;\n    show: string;\n    othershow: string;\n\n    ogtext?: string;\n    title?: string;\n    update: boolean;\n\n}\ninterface State {\n    title: string;\n    content: string;\n}\n\n\ninterface IticketData {\n    id: number;\n    content: string;\n    tt: string;\n    userID?: number\n}\n\n//prop state dynamically created in other componetnts/classes\nexport class TicketCard extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            title: (props.title) ? props.title : \"\",\n            content: (props.ogtext) ? props.ogtext : \"\"\n        };\n\n        this.handleTTchange = this.handleTTchange.bind(this);\n        this.handleTicketchange = this.handleTicketchange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n    handleTicketchange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n        this.setState\n            ({\n                content: (event.target as HTMLTextAreaElement).value\n            });\n    }\n\n    handleTTchange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState\n            ({\n                title: (event.target as HTMLInputElement).value\n            });\n    }\n\n    handleDelete(event: React.MouseEvent<HTMLButtonElement>) {\n        if (sessionStorage.getItem(\"permission\") === \"admin\") {\n            const createdata: IticketData =\n            {\n                //get id of this card \n                id: (this.props.id) ? this.props.id : 0,\n                content: this.state.content,\n                tt: this.state.title,\n                userID: Number(sessionStorage.getItem(\"currentuser\"))\n            }\n            httpDELETE(`https:localhost:5001/api/Data/ticket/delete/${Number(sessionStorage.getItem(\"currentuser\"))}`, createdata)\n            window.location.reload(true);\n        }\n    }\n    handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n        //saftey check frontend permission eventhough it happens on the backend\n        if (sessionStorage.getItem(\"permission\") === \"helpdesk\" || sessionStorage.getItem(\"permission\") === \"admin\") {\n            if (this.props.update) {\n\n                const createdata: IticketData =\n                {\n                    //get id of this card \n                    id: (this.props.id) ? this.props.id : 0,\n                    content: this.state.content,\n                    tt: this.state.title,\n                    userID: Number(sessionStorage.getItem(\"currentuser\"))\n                }\n\n                //update data in current ticket context feild\n                fetch(`https:localhost:5001/api/Data/ticket/${createdata.id}`,\n                    {\n                        method: 'PUT',\n                        body: JSON.stringify(createdata),\n                        headers: {\n                            'Accept': 'application/json',\n                            'Content-Type': 'application/json'\n                        }\n                    })\n\n                    .then(response => response.json())\n                    .catch((err) => {\n                        console.log(err);\n                    });\n\n            }\n            else {\n                const createdata: IticketData =\n                {\n                    //get current userID\n                    id: Number(sessionStorage.getItem(\"currentuser\")),\n                    content: this.state.content,\n                    tt: this.state.title\n                }\n\n                fetch(\"https:localhost:5001/api/Data/ticket\",\n                    {\n                        method: 'POST',\n                        body: JSON.stringify(createdata),\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    })\n                    .then(response => response.json())\n                    .then(body => {\n                        console.log(body);\n                        this.setState(//successful submit reset ticket\n                            {\n                                content: \"\",\n                                title: \"\"\n                            }\n                        )\n                    })\n                    .catch((err) => {\n                        console.log(err);\n                    });\n                console.log(\"authorized\")\n            }\n        }\n    }\n    render() {\n        return (\n            <div >\n                <div className=\"contentWrapper\">\n                    <div id=\"ticketnav\">\n                        <input className={this.props.show} id=\"TT\" type=\"text\" placeholder=\"Ticket Title\" value={this.state.title} onChange={this.handleTTchange} required />\n                        <h2>{this.props.title}</h2>\n\n                        <button className={this.props.othershow} id=\"dBtn\" onClick={this.handleDelete.bind(this)}>Delete</button>\n                    </div>\n                    <form className=\"helpdeskWrapper\" onSubmit={this.handleSubmit}>\n                        <textarea maxLength={500} id=\"box\" value={this.state.content} onChange={this.handleTicketchange}>\n\n                        </textarea>\n                        <input type=\"submit\" id=\"sBtn\" value=\"Submit Ticket\" />\n\n                    </form>\n\n                </div>\n            </div>\n\n        );\n    }\n\n};\n","import { async } from \"q\";\n\n// var data : any;\n//use a T template class so that we can pass in any json object being sent from the server!\nexport const httpDELETE = <T> (url: string, data: any): Promise<T> =>\n{\n    return new Promise(resolve =>\n    {\n        fetch(url,\n            {\n                method: 'DELETE',\n                body: JSON.stringify(data),\n                headers:{\n                    // 'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                  }\n            }).then(() => {\n            console.log('removed');\n            }).catch(err => {\n            console.error(err)\n            });\n    });  \n};","import * as React from 'react';\nimport { TicketCard } from '../TicketCard/';\n\nexport const CreateTicket: React.SFC<{}> = () => {\n        return (\n            <>\n            <h1>Create Ticket</h1>\n            {/* dynamically create all of our tickets */}\n                <TicketCard show=\"show\" othershow= \"hide\"update ={false} />\n            </>\n        );\n    \n  };\n","import * as React from 'react';\nimport { TicketCard } from '../TicketCard';\n\ninterface Props { }\n\ninterface State {\n    grabbedData: Array<IticketPost>;\n}\n\ninterface IticketPost {\n    id: number;\n    content: string;\n    TT: string;//ticket title\n}\n\n\n\nexport class UpdateTicket extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            grabbedData: []\n        };\n\n        this.GrabData();\n\n    }\n\n\n    GrabData = () => {\n        //grab current list of all tickets\n        console.log(sessionStorage.getItem(\"currentuser\"))\n        if (sessionStorage.getItem(\"permission\") === \"helpdesk\") {\n            const userPath = Number(sessionStorage.getItem(\"currentuser\"));\n\n            fetch(`https:localhost:5001/api/Data/ticket/${userPath}`)//grab all of your tickets made on this account\n                .then(response => response.json())\n                .then(body => {\n                    this.setState\n                        ({\n                            grabbedData: body,\n\n                        });\n                    console.log(this.state.grabbedData)\n\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n            console.log(\"authorized\")\n        }\n\n        else {\n            alert(\"unauthorized user\")\n        }\n    }\n\n   \n    render() {\n        return (\n            <>      \n            <h1>My Tickets</h1>\n            {/* dynamically create all of our tickets */}\n                {this.state.grabbedData.map((data:any )=> \n                (<TicketCard id={data.id} key={data.id}  show=\"hide\" othershow = \"hide\" ogtext =\n                {data.content}\n                title = {data.tt}\n                update = {true} />))}\n            \n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { Link} from \"react-router-dom\";\nimport {CreateTicket} from \"../createTicket\";\nimport {UpdateTicket} from \"../updateTicket\";\n\ninterface Props {}\n\ninterface State {\n  createClicked: boolean;\n  updateClicked: boolean;\n\n  createHide: string;\n  updateHide: string;\n\n}\n//control what shows and if user input tickets should show on click\nexport class HelpDesk extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state =\n    {\n      createClicked: false,\n      updateClicked: false,\n      createHide: \"show\",\n      updateHide: \"show\",\n\n    }\n  }\n\n\n  displayCreate = () => {\n\n    this.setState(\n      {\n        createClicked: true,\n        createHide: \"hide\"\n      }\n    )\n  }\n\n  displayUpdate = () => {\n\n    this.setState(\n      {\n        updateClicked: true,\n        updateHide: \"hide\"\n      }\n    )\n  }\n  render() {\n    return(\n      <>\n            {/* hide our input fields until button click*/}\n\n        <h2 id=\"pageTitle\">HelpDesk DashBoard</h2>\n        <button onClick={ this.displayCreate} className= {this.state.createHide}id=\"ctBtn\">Create Ticket</button>\n        {this.state.createClicked ? <CreateTicket /> : null}\n\n        <button onClick={ this.displayUpdate} className= {this.state.updateHide}id=\"ctBtn\">update Ticket</button>\n        {this.state.updateClicked ? <UpdateTicket /> : null}\n\n       \n      </>\n    );\n  }\n}","\nimport * as React from 'react';\nimport { TicketCard } from '../TicketCard/';\ninterface Props { }\n\ninterface State {\n    grabbedData: Array<IticketPost>;\n}\n\ninterface IticketPost {\n    id: number;\n    content: string;\n    TT: string;//ticket title\n}\n\n\n\nexport class AdminTicket extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            grabbedData: []\n        };\n\n        this.GrabData();\n\n    }\n\n\n    GrabData = () => {\n        //grab current list of all tickets\n        console.log(sessionStorage.getItem(\"currentuser\"))\n        if (sessionStorage.getItem(\"permission\") === \"admin\") {\n            const userPath = Number(sessionStorage.getItem(\"currentuser\"));\n\n            fetch(`https:localhost:5001/api/Data/ticket/all/${userPath}`)//grab all of your tickets made on this account\n                .then(response => response.json())\n                .then(body => {\n                    this.setState\n                        ({\n                            grabbedData: body,\n\n                        });\n                    console.log(this.state.grabbedData)\n\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n            console.log(\"authorized\")\n        }\n\n        else {\n            alert(\"unauthorized user\")\n        }\n    }\n\n   \n    render() {\n        return (\n            <>  \n            {/* <div className=\"adminwrapper\">     */}\n\n            <h1>My Tickets</h1>\n            {/* dynamically create all of our tickets */}\n                {this.state.grabbedData.map((data:any )=> \n                (<TicketCard id={data.id} key={data.id}  show=\"hide\" othershow=\"show\"ogtext =\n                {data.content}\n                title = {data.tt}\n                update = {true} />))}\n            {/* </div> */}\n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { Link} from \"react-router-dom\";\nimport {AdminTicket} from \"../adminTicket\";\n\n//admin page portal planned but never completed\ninterface Props {}\n\ninterface State {\n  updateClicked: boolean;\n  updateHide: string;\n\n\n}\n/*semi psuedo coded this class would be very similar to helpdesk*/\nexport class Admin extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state =\n    {\n      updateClicked: false,\n      updateHide: \"show\",\n\n    }\n  }\n\n  clearStorage = ()=>//logs user out\n  {\n    sessionStorage.clear();\n    console.log(sessionStorage);\n  } \n  displayUpdate = () => {\n\n    this.setState(\n      {\n        updateClicked: true,\n        updateHide: \"hide\"\n      }\n    )\n  }\n  render() {\n    return(\n      <>\n            {/* hide our input fields until button click*/}\n\n        <h2 id=\"pageTitle\">Admin DashBoard</h2>\n        <button onClick={ this.displayUpdate} className= {this.state.updateHide}id=\"ctBtn\">update Ticket</button>\n        {this.state.updateClicked ? <AdminTicket /> : null}\n\n       \n      </>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n// import {CreateAccount} from './Components/CreateAccount' \nimport {Login} from './Components/login'\nimport {User} from \"./Components/User\"\nimport {HelpDesk} from \"./Components/HelpDesk\"\nimport {Admin} from \"./Components/Admin\"\n\n\n\nconst App: React.FC = () => {\n\n  const clearStorage = ()=>//logs user out\n  {\n    sessionStorage.clear();\n    console.log(sessionStorage);\n  } \n\n  return (\n    <Router>\n      <div>\n      <nav className=\"navbar fixed-top navbar-light\">\n      <a className=\"navbar-brand\" href=\"#\">HelpDesk</a>\n      <Link id=\"logout\" to=\"/\" onClick={clearStorage}>logOut</Link>\n\n    </nav>\n        {/* <Login /> */}\n        <Route exact path=\"/\" component={Login} />\n        {/* <Route exact path=\"/create\" component={CreateAccount} /> */}\n        <Route exact path=\"/user\" component={User} />\n        <Route exact path=\"/helpdesk\" component={HelpDesk} />\n        <Route exact path=\"/admin\" component={Admin} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}